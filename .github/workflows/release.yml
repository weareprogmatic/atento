name: Release Workflow

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NEW_VERSION: ""

jobs:
  # ------------------------------
  # 1️⃣ Determine version & bump Cargo.toml
  # ------------------------------
  release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install tools
        run: cargo install cargo-edit

      - name: Determine bump type
        id: bump_version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          VERSION_CLEANED="${LAST_TAG#v}"
          VERSION_CLEANED=$(echo "$VERSION_CLEANED" | tr -d '\r')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_CLEANED"

          COMMIT_LOG=$(git log --pretty=format:%s $LAST_TAG..HEAD)
          BUMP_TYPE="patch"
          if echo "$COMMIT_LOG" | grep -q "BREAKING CHANGE"; then
            BUMP_TYPE="major"
          elif echo "$COMMIT_LOG" | grep -q "^feat"; then
            BUMP_TYPE="minor"
          elif echo "$COMMIT_LOG" | grep -q "^fix"; then
            BUMP_TYPE="patch"
          fi

          case $BUMP_TYPE in
            patch) PATCH=$((PATCH + 1));;
            minor) MINOR=$((MINOR + 1)); PATCH=0;;
            major) MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Bump Cargo.toml versions
        run: |
          cargo set-version $NEW_VERSION --manifest-path atento-core/Cargo.toml
          cargo set-version $NEW_VERSION --manifest-path atento-cli/Cargo.toml

      - name: Upload updated Cargo.toml
        uses: actions/upload-artifact@v4
        with:
          name: updated-cargo
          path: |
            atento-core/Cargo.toml
            atento-cli/Cargo.toml

  # ------------------------------
  # 2️⃣ Build Linux + Windows
  # ------------------------------
  build-linux-windows:
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
          - target: aarch64-unknown-linux-musl
          - target: x86_64-pc-windows-gnu

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download updated Cargo files
        uses: actions/download-artifact@v4
        with:
          name: updated-cargo
          path: ./

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - run: cargo install cross

      - name: Build ${{ matrix.target }}
        run: cross build --release --target ${{ matrix.target }} --bin atento-cli

      - name: Move binary to artifacts folder
        id: move_binary
        run: |
          mkdir -p artifacts
          set -e
          case "${{ matrix.target }}" in
            x86_64-unknown-linux-musl)
              mkdir -p artifacts/atento-linux-amd64
              mv target/${{ matrix.target }}/release/atento-cli artifacts/atento-linux-amd64/atento
              ARTIFACT_NAME=atento-linux-amd64
              ;;
            aarch64-unknown-linux-musl)
              mkdir -p artifacts/atento-linux-arm64
              mv target/${{ matrix.target }}/release/atento-cli artifacts/atento-linux-arm64/atento
              ARTIFACT_NAME=atento-linux-arm64
              ;;
            x86_64-pc-windows-gnu)
              mkdir -p artifacts/atento-windows-amd64
              mv target/${{ matrix.target }}/release/atento-cli.exe artifacts/atento-windows-amd64/atento.exe
              ARTIFACT_NAME=atento-windows-amd64
              ;;
          esac
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # Artifact name matches folder
          name: ${{ steps.move_binary.outputs.artifact_name }}
          path: artifacts/*


  # ------------------------------
  # 3️⃣ Build macOS
  # ------------------------------
  build-macos:
    needs: release
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download updated Cargo files
        uses: actions/download-artifact@v4
        with:
          name: updated-cargo
          path: ./

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build macOS binary
        run: cargo build --release --bin atento-cli

      - name: Move macOS binary to artifacts folder
        run: |
          mkdir -p artifacts
          mv target/release/atento-cli target/release/atento
          mv target/release artifacts/atento-macos-arm64

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: atento-macos-arm64
          path: artifacts/atento-macos-arm64/*

  # ------------------------------
  # 4️⃣ Create GitHub Release
  # ------------------------------
  create-release:
    needs: [release, build-linux-windows, build-macos]
    runs-on: ubuntu-latest
    env:
      NEW_VERSION: ${{ needs.release.outputs.new_version }}
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: "Release v${{ env.NEW_VERSION }}"
          files: |
            artifacts/**/atento
            artifacts/**/atento.exe